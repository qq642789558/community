<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongppman.community.dao.MessageMapper">

    <resultMap id="BaseResultMap" type="com.dongppman.community.entity.Message">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="fromId" column="from_id" jdbcType="INTEGER"/>
            <result property="toId" column="to_id" jdbcType="INTEGER"/>
            <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="INTEGER"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>
    <update id="updateStatus">
        update message set status=#{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status=0
        and from_id!=1
        and to_id=#{userId}
        <if test="conversationId!=null">
            and conversation_id= #{conversationId}
        </if>
    </select>

    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status!=2
        and from_id!=1
        and conversation_id = #{conversationId}

    </select>
    <select id="selectConversationCount" resultType="java.lang.Integer">
        select  count(m.maxid) from (
            select max(id) as maxid from message
            where status !=2
            and from_id!=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
            )as m

    </select>
    <select id="selectConversations" resultType="com.dongppman.community.entity.Message">
        select <include refid="Base_Column_List"></include>
        from message
        where id in (
            select max(id) from message
            where status !=2
            and from_id!=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
        )
        order by id desc
        LIMIT  #{offset}, #{limit}
    </select>
    <select id="selectLetters" resultType="com.dongppman.community.entity.Message">
        select <include refid="Base_Column_List"></include>
        from message
        where status !=2
        and from_id !=1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>
</mapper>
